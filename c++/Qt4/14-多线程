QMutex
QReadWriteLock
QSemaphore
QWaitCondition



线程间通讯：

子线程间的互相通讯，可以使用去全局变量来实现（记得用锁来保护好全局变量），因为子线程的阻塞等待是无所谓的。
但是！如果是子线程与主线程的通讯，使用全局变量就不行了，因为主线程如果阻塞等待某个锁/信号量，那么直接的
效果就是交互界面卡死，这是很糟糕的事情。

（*）在上述情况下，条件变量就显得非常好用了，主线程可以等待条件变量的发生，而条件变量的传递是由内核负责的，
主线程不需要去轮询条件变量


（linux的服务器程序也应该避免因为等待子线程释放资源而导致主线相关轮询动作的阻塞）


除了使用条件变量外，在Qt中可以在主-子线程间建立信号-槽机制，已达到通讯的目的。
主线程的槽函数 与 子线程（QThread子类实例）中的信号可以直接关联。


线程类QThread的原理：
所有继承自QThread的类，在实例化的时候都相当于创建了一个线程。
在QThread类中有protected的方法run()，这个方法就相当于线程的执行函数。
类比为linux 中 
int pthread_create(pthread_t *thread, const pthread_attr_t *attr,void *(*start_routine) (void *), void *arg);

实例化  =  调用pthread_create
run()   =  void *(*start_routine) (void *)      //run函数的实现就是线程处理函数的实现

QThread还有一个方法 start() , run()是虚函数，start()是槽，run在start中，start的时候可以指定线程优先级。
从两个函数的定位就可以看出，run是用来被重写的，故线程需要做哪些事情是要被写入run里面的，即对虚函数的重写。
start相当于一个开关，“仅仅”当做开关使用。（linux中是没有这样一个开关的，Qt在这方面要比posix要友好）


（*）run函数的执行完毕标志着线程的执行完毕。
通过函数指针+start控制，可以很好地实现线程池。




