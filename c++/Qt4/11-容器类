##关键类
QVector
QLinkedList
QList
QStack
QQueue
QMap
QHash





##要点整理

#1 ========================================================================================================

QT的容器类都是 “写时复制” 的

#2 ========================================================================================================

可以使用QDataStream编程数据流

#3 ========================================================================================================

QVector、QLinkedList、QList为连续容器类（内存空间连续），QMap和QHash为关联容器类（空间不连续，通过指针关联）

#4 ========================================================================================================

qSort只能对连续容器进行排序
qBinaryFind可在经过排序的连续容器上进行二分查找

(*)#5 ========================================================================================================

派生子QObject的类不满足条件，所以切记在使用容器类的时候，一定不要把自定义类作为模板参数，比如 QMap<addrinfo> tmp

（！）为了解决这个问题，我们在使用时都是用指针作为模板参数，比如 QMap<addrinfo *>tmp。

所以可以武断地认为，容器类“几乎”只能存放指针

（！）模板参数也可以是容器类，但是尖括号之间要有空格  ，比如  QList< QVector<double> > list


#6 ========================================================================================================

迭代器分两种：只读 、 读写

平时看到的都是只读
读写的迭代器名字中都包含 Mutable

QVectorIterator   -->   只读
QMutableVectorIterator   -->   读写

（*）#7 ========================================================================================================

当某个函数的返回值是一个容器时，如果想使用迭代器对其进行遍历，那么必须先创建一个临时变量来把返回值存起来。
然后再建立迭代器来比那里临时变量，比如：

QList<int> getlist();

QList<int> tmp  = myclass->getlist();


推荐使用java风格的迭代器进行容器的遍历：

QListIterator<int> Lit(myclass->getlist());
while(Lit.hasNext()){
	do(Lit.next);
}

Java风格的迭代器相当于创建一个新的迭代器类，然后让迭代器类指向目标容器，然后遍历，相当于创建一个指针，不需要
对原容器进行赋值。充分李永乐“写时复制”的特性

c++风格中，在进行只读动作时，尽量使用const_iterator,constBegin,constEnd


#8 ========================================================================================================





#9 ========================================================================================================

#10 ========================================================================================================

#11 ========================================================================================================


