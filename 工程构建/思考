======================================================================================================================

c++中以类为最小单元。类可分为两大类：一是提供某些工具/功能的类。二是提供作为数据容器的类

功能型的类 只要一个实例即可，因此使用单例模式
数据容器型的类 根据数据量，需要N多个，为了方便管理，可以使用工厂模式

========================================================================================================================

回调函数是c语言编程常用的手段。其最重要的功能就是实现应用程序和库文件的解耦。
如果不使用回调函数，使用正常的调用可以完成函数调用，只要在库源码中include应用程序头文件，然后显式调用对应函数即可。
显式调用的问题在于，如果有多个应用程序都使用某个库，那么库源码中的某个函数必须为不同的应用程序指定不同的执行分支。
比如库中 有 libfunc函数，app1中有app1func，app2中有app2func，这两个函数都会调用libfunc，同时要求libfunc在执行完以后，都
调用自己的result函数(app1中是result1，app2中是result2)。那么libfunc的实现就必须是 if(app1) result1();else if(app2) result2()。
同时还必须同时include app1.h和app2.h。这样的库已经违背了库作为独立稳定函数集的本质。

如果使用回调函数，那么首先不需要include app1.h和app2.h。其次在libfunc中，只要调用resultCB，而这个resultCB为能够指向result1和
result2的函数指针(这里也有一点约束，result1和result2的参数列表必须一致)。然后在app1和app2中按自己的需要把app1func app2func的地址
赋值给resultCB即可。libfunc在使用的时候直接调用resultCB。


回调函数存在的意义在于解耦，在库对外提供自己的回调接口后，能够面向接口编程，把自己的处理结果通过接口向外输出，而不需要关心
到底是什么样的应用程序在调用自己。而且自己也无需知道应用程序中接收自己处理结果的那个函数的原型。


回调函数在单纯以返回值作为处理结果的场景下没有太大意义。主要在库处理外数据后再把输出返回的场景下。


在库(动态库/静态库)编程中，回调函数作为接口对外开放。这也是唯一一种可选的编程模式。离开回调函数，库将不再是库，因为那时的库
必须知道应用程序的接口，这是不合理的。
