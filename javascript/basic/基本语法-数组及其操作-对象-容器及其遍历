#1  ===========================================================================================

对象

JavaScript的对象是一组由键-值组成的无序集合，例如：

var person = {
    name: 'Bob',
    age: 20,
    tags: ['js', 'web', 'mobile'],
    city: 'Beijing',
    hasCar: true,
    zipcode: null
};


#2  ===========================================================================================

变量及作用域

javascript运行的最小作用域是页面，既js代码属于哪个html，既一个html是一个全局作用域。
当在一个html中引入多个js文件，或者有多个js代码段时，这些js代码共享html作用域。


1）未使用var修饰的变量，是html作用域的，即在当前html的所有js文件/js代码段中是共享的。是全局的
2）使用var修饰的变量，是当前函数可见的，即大括号{}作用域（这点和c/c++一样）


#3  ============================================================================================

字符串的串联：
1）‘+’串联： 'java'+'script'
2）模板串联： var a = 'java'
	      var b = 'script'
	      var c = ${a}${b}

字符串的整体性：
字符串不可像c/c++那样，对其中的某些字符单独修改
var s = 'Test';
s[0] = 'X';
alert(s); // s仍然为'Test'

#4  ============================================================================================

数组操作

indexOf    ----    获取数组的元素下标，从0开始
slice      ----    切割数组，返回新的数组
push	   ----    向数组尾部追加元素
pop	   ----    从数组尾部移除元素
unshift    ----	   向数组首部填充元素
shift      ----    从数组首部移除元素
sort	   ----	   排序数组，会修改原数组，而不是返回新数组
reverse	   ----	   翻转
splice	   ----	   从指定位置删除n个元素，同时可以在删除点增加m个元素(也可以只删除不增加)
			var arr = ['Microsoft', 'Apple', 'Yahoo', 'AOL', 'Excite', 'Oracle'];
			// 从索引2开始删除3个元素,然后再添加两个元素:
			arr.splice(2, 3, 'Google', 'Facebook'); // 返回删除的元素 ['Yahoo', 'AOL', 'Excite']
			arr; // ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']
			// 只删除,不添加:
			arr.splice(2, 2); // ['Google', 'Facebook']
			arr; // ['Microsoft', 'Apple', 'Oracle']
			// 只添加,不删除:
			arr.splice(2, 0, 'Google', 'Facebook'); // 返回[],因为没有删除任何元素
			arr; // ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']
concat	   ----    链接两个数组
join	   ----	   把数组中的元素使用指定的字符连接，比如 var arr = ['A', 'B', 'C', 1, 2, 3];
							  arr.join('-'); // 'A-B-C-1-2-3'

#5  ============================================================================================

对象

js是动态对象模式，对象中的元素不一定要先定义再使用，也可以在在后续代码中动态追加属性
var xiaoming = {
    name: '小明'
};
xiaoming.age; // undefined
xiaoming.age = 18; // 新增一个age属性
xiaoming.age; // 18
delete xiaoming.age; // 删除age属性
xiaoming.age; // undefined
delete xiaoming['name']; // 删除name属性
xiaoming.name; // undefined
delete xiaoming.school; // 删除一个不存在的school属性也不会报错



要判断一个属性是否是xiaoming自身拥有的，而不是继承得到的，可以用hasOwnProperty()方法：

var xiaoming = {
    name: '小明'
};
xiaoming.hasOwnProperty('name'); // true
xiaoming.hasOwnProperty('toString'); // false

#6  ============================================================================================

容器对象 Map和Set

---Map---

Map是对象的容器格式

Map的查找不会因为元素个数的多少而影响查找效率

var m = new Map([['Michael', 95], ['Bob', 75], ['Tracy', 85]]);
m.get('Michael'); // 95

Map作为键值对结构的对象，其一个键对应一个值，当给一个键设置多个值时，会产生覆盖效果

（？？？）Map和对象的区别？

---Set---

Set是数组Array的容器格式

Set只存储键/只存储值，即只有单值。同Map一样，不存在重复元素


#7  ============================================================================================

对 Array ，Map ，Set 的遍历

a.forEach(function (element, index, array) {
    // element: 指向当前元素的值
    // index: 指向当前索引
    // array: 指向Array对象本身
    console.log(element + ', index = ' + index);
});

对 Array 和 Set 的遍历
var s = new Set(['A', 'B', 'C']);
s.forEach(function (element, sameElement, set) {	//element和sameElement是同样的
    console.log(element);
});

对 Map 的遍历
var m = new Map([[1, 'x'], [2, 'y'], [3, 'z']]);
m.forEach(function (value, key, map) {
    console.log(value);
});

































