#1  ===============================================================================================

函数的定义

------------------------------------
可以定义匿名函数:
function(x){

}
该函数接收一个参数，但是用不起来

可以把匿名函数赋值给var变量
var pf = function(x){

}
使用pf即可，这里和函数指针是一样的

也可以定义非匿名函数
function fun(x){

}


#2  ===============================================================================================

函数的入参

调用函数时，入参的个数可以不和函数定义的入参个数一致，但是这样的话，在函数实现时就无法按照形参名称
使用其他入参，我们可以通过arguments来访问其他没有与形参对应的入参。


函数有入参除了形参外，还有一个arguments，这个事隐形的，是一个类似于数组的东西，内含所有入参
function foo(x) {
    console.log('x = ' + x); // 10
    for (var i=0; i<arguments.length; i++) {
        console.log('arg ' + i + ' = ' + arguments[i]); // 10, 20, 30
    }
}
foo(10, 20, 30);


由上可见，可以使用arguments来访问所有入参(形参范围内核形参范围外)。凡是如果我只想访问形参范围外的
入参该怎么操作？

reset参数可以用来单独访问形参范围外的入参(而不是先遍历arguments，然后排除可见入参，见PS)
function foo(a, b, ...rest) {
    console.log('a = ' + a);
    console.log('b = ' + b);
    console.log(rest);
}

foo(1, 2, 3, 4, 5);
// 结果:
// a = 1
// b = 2
// Array [ 3, 4, 5 ]

foo(1);
// 结果:
// a = 1
// b = undefined
// Array []


----------ps------------
function foo(a, b) {
    var i, rest = [];
    if (arguments.length > 2) {
        for (i = 2; i<arguments.length; i++) {
            rest.push(arguments[i]);
        }
    }
    console.log('a = ' + a);
    console.log('b = ' + b);
    console.log(rest);
}
----------ps------------



#3  ===============================================================================================

javascript engine会自动在未添加分号的行尾添加分号，如果return分行写，则会导致语句歧义

function foo() {
    return { name: 'foo' };
}

foo(); // { name: 'foo' }
如果把return语句拆成两行：

function foo() {
    return
        { name: 'foo' };
}

foo(); // undefined


#4  ===============================================================================================

变量提升

和bash一样，变量即便是在整个大括号的最后面声明，变量依旧可以提前访问，只不过值是undefined

function foo() {
    var x = 'Hello, ' + y;
    console.log(x);
    var y = 'Bob';
}
在javascript看来是这样的：
function foo() {
    var y; // 提升变量y的申明，此时y为undefined
    var x = 'Hello, ' + y;
    console.log(x);
    y = 'Bob';
}

（！！！）注意，即便是在{ }内部定义的变量，也可以在{ }外部访问，比如：
var pf = function(){
    var i = "i"

    if(0){
        var j = "j"
    }

    alert(j)	//输出undefined，因为if(0)不执行，但是j还是被定义了
}
可见，这里的变量提升，是面向整个函数作用域的，{ } 不会阻止这个过程


#5  ===============================================================================================

---全局作用域---

javascript有一个根全局对象，window，所有不再函数内部的变量都是window的一个属性，可以通过window.xxx来访问
	（PS：访问全局对象xxx 和 window.xxx 是一样的）

这里的window其实就是html文件，所以如果在html中引用多个js文件，那么这些js文件中使用的window是指同一个对象，
即html对应的窗口表现，所以在各个js中使用的window实际上是同一个实例。
所以，如果多个js文件都使用同名全局变量，那么就会覆盖，因为他们都是window的属性。


---名字空间---

目前的一个策略是，在不同的js文件中，定义自己的全局变量。
比如 a.js中，定义var a_js = []
     b.js中，定义var b_js = []
那么 a_js和b_js 都是 window 的属性。故不会再有任何冲突，相当于在全局变量上再封一层。


---局部作用域---

	在#4中提到，函数内部的变量是函数全局的，{ }不会限制变量的定义，变量会被直接提升到函数顶部，
	那么如何定义像c/c++那种以{ }作为作用域的变量呢？可以使用let关键字，不过此关键字在ES6标准
	中引入，需要考察qml引擎和js引擎当前参考的ES标准的版本号


---常量---

ES6引入了const关键字用来定义常量，const和let一样，具备{ }作用域限定

---解构赋值---

ES6引入了集中赋值语法：var [x, y, z] = ['hello', 'JavaScript', 'ES6'];






















