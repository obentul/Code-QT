#1 ==================================================================================================================
概述

qt中，event就是对象，是抽象类QEvent的实例，这个对象代表当前应用发生了什么或者当前应用外的其他情况发生(系统级别/硬件事件等)。
Event可以被QObject类接收和处理，特别和QWidget类关联比较大。


#2 ==============================================================================================================
Event如何被传递


当有事件产生时，QT会创建一个能够代表这个事件的QEvent实例，这里由于QEvent是基类，所以实际上创建的是相应的子类实例，比如
关闭窗口事件CloseEvent，然后通过调用event()函数，把此实例传递给指定的接受实例，比如关闭事件会被传递给被点击关闭按钮的
窗口实例。

小结：QT core在收到事件时(可以看做系统中断或者软件中断)，创建一个QEvent实例，然后作为参数传递给相应的接收实例

#3 ================================================================================================================== 
Event的子类有哪些

前面提到，针对不同的事件，QT会创建相应类的实例，比如窗口尺寸调整事件发生时，QT会创建一个QResizeEvent实例，同时QResizeEvent
类还会对QEvent类进行补充，比如增减函数size()和oldSize()，以标示尺寸调整前和调整后的数据分别是多少。

此外，多个事件可以一并导向同一个Event实例，比如鼠标动作产生时，不论是双击，左键，滚动，都会导致QT创建一个QMouseEvent实例


#4 ==================================================================================================================

每一个QEvent的子类，在QEvent中都有一个对应的枚举值，比如 QEvent::Close QEvent::Clipboard ，具体每个值对应的事件类型，
可以参考帮助文档


#5 ==================================================================================================================
事件处理

一个常用的传递事件的方法是直接调用对应事件的虚函数。如果想让某个QWidget进入paintEvent，那么可以直接调用。比如：

QWideget *w1 = new QWidget();

w1->paintEvent();	//手动触发QWidget的绘制事件。

注：这里的paintEvent()是虚函数，可以被重新实现。如果在重新实现时想增加一些操作再调用用来的实现，那么可以再调用基类的
    虚函数即可，比如：
	
	class myQWidget::public QWidget(){
		

		void paintEvent(QPaintEvent *event) override
		{
			//dosth.

			QWidget::paintEvent(event);
		}

	}

如果想替换基类的某个事件处理虚函数，那么重写即可。如果想扩展基类的某个事件处理虚函数，那么在增加自己的内容后，在最后
调用基类的虚函数即可。


#6 ==================================================================================================================

除了#5中的针对某个事件虚函数的重写方法外，还可以从QObject的event虚函数着手，整个重写/扩展所有的事件处理机制

  class MyWidget::public QWidget{

	...

  bool MyWidget::event(QEvent *event)
  {
      if (event->type() == QEvent::KeyPress) {
      QKeyEvent *ke = static_cast<QKeyEvent *>(event);
      if (ke->key() == Qt::Key_Tab) {
          // special tab handling here
          return true;
      }
      } else if (event->type() == MyCustomEventType) {
      MyCustomEvent *myEvent = static_cast<MyCustomEvent *>(event);
      // custom event handling here
      return true;
      }

      return QWidget::event(event);	//再执行完自定义动作后，依旧执行原有动作，这里属于 “扩展” ，而不是 “替换”
  }

	...

  }

  注：这里和vlc在事件处理的逻辑上有异曲同工之妙，具体参考DemoVlc工程中的事件处理函数


#7 ==================================================================================================================
事件过滤器

有些时候，当对某个对象对另外一个对象发送事件时，需要先看一下，或者先阻拦一下事件的发送。这个时候可以再事件“发送者”一方设置事
件过滤器。

可以通过QObject::installEventFilter()函数来设置一个事件过滤器。事件过滤器会“先于“(不是阻塞) 实际的事件处理虚函数 运行。这里
优先拦截后，可以继续传递给原来的事件处理虚函数，也可以直接阻塞拦截，不再调用原有的处理虚函数。

可以通过QObject::removeEventFilter() 函数来撤销事件过滤器。


(*)#8 ==================================================================================================================
事件过滤器的 继续传递 和 阻塞拦截

事件过滤器在 截获事件后，是继续传递还是阻塞拦截，这个动作时由此函数的返回值决定的。如果继续传递下去，此函数return false，
如果阻塞拦截，此函数return true

  例如：

  bool MyObject::eventFilter(QObject *object, QEvent *event)		//eventFilter是QObject的虚函数
  {
      if (object == target && event->type() == QEvent::KeyPress) {	//这里的target是伪代码的写法
          QKeyEvent *keyEvent = static_cast<QKeyEvent *>(event);
          if (keyEvent->key() == Qt::Key_Tab) {
              // Special tab handling
              return true;
          } else
              return false;
      }
      return false;
  }

	注：1）参数object代表 接收事件 的对象，event代表事件类型
	    2）代码第一行中的object == target是伪代码，先判断下接收事件的目标对象和传入的参数是否一致
	    3）return true的那行，再结和 if (keyEvent->key() == Qt::Key_Tab) ，可以看出来，此过滤器会 阻塞拦截 Tab 按键事件
	    4）两个 return false 表示，分别表示：”除了Tab 按键外的其他按键会被 继续传递“ 和 ”其他非按键事件会被继续传递“


#9 ====================================================================================================================


对 #7 和 #8 的一点补充：

1）事件过滤器是QObject的虚函数，默认情况下应该是return false，所有事件都被传递
2）事件过滤器可以用来修饰QApplication 和 QCoreApplication，因为这两个类虽然看起来很底层，其实还是继承QObject的
3）当世界过滤器修饰2中的两个类时，会对整个应用程序产生影响，比如对Tab键做return true动作，此时将导致整个应用程序的所有组件
   都无法获得Tab键事件。威力很强，但是会影响性能，导致事件传递过慢


#10  ====================================================================================================================
发送事件(自定义事件)

应用程序可以创建属于自己的事件，然后发送给其他应用程序。
可以通过 QCoreApplication::sendEvent() and QCoreApplication::postEvent() 来创建事件 和 发送事件

sendEvent是立刻发送
postEvent是丢入QT的事件调度队列，等待core在下次调度中处理








































