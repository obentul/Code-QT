
##  ==========================QThreadPool 和 Qrunnable 结合实现线程池  ============================

#1    ==========================================================================================

每个Qt程序都有一个主线程和一个主线程池。

可以通过globalInstance()函数来访问这个主线程，方法为 QThreadPool::globalInstance()，可见QthreadPool
类中有一个静态成员变量，即运行程序的主线程。

QThreadPool类有一个start函数，这个函数接收一个 QRunable 实例，又QRunnable有run()虚函数，相当于是
线程函数体，当一个QThreadPool实例调用其start函数的时候，就相当于把start函数的参数作为函数实例丢入线程中
运行  (QThreadPool应该会在自己内部管理自己的线程实例集，好像是不对外开放访问的)


线程池相关的类

QThreadPool   (线程池)
    |
QRunnable     (线程池需要的执行函数)


注：线程池是直接操作QRuunable的，相当于，把线程实例层抽掉了。线程池直接管理所有可执行函数QRunnable实例



#2    ==========================================================================================


如上面所述，QRunable是一个可执行函数实例，这个管理就必须注意，因为它不是在编译时被放入.text区域的，
不是始终静态存在的，而是一个“实例”，是存在于堆栈中的，那么这个实例何时被销毁？如果QThreadPool在
使用QRunnable时，实例不存在了，会怎么样，该怎么安全地使用？

1）QRunnable实例是可被多个QThread使用的，这很好理解，就好像函数一样，可以被多个线程同时调用，但是
   注意！在函数设计时，需要考虑可重入性，也可以利用这点来实现多个线程同时操作共享资源。

2）QThreadPool在使用QRunnable实例时，应当使用tryStart()来代替start()。

3）QRunnable有一个标志位是autoDelete，当所有使用本QRRunable的QThread都 exit 后，本QRunable将会
   被销毁，这个属性不是必须的，比如，如果我就是想注册一个函数，那就没必要频繁销毁和创建QRunable

4）可以设置线程池中所有线程的执行超时时间，如超时，则自动退出，此外还可以设置重新启动标志，当超时
   后可以立即重启。默认情况下，QThreadPool对各个线程的超时时间设置为负值，代表永不超时。
	注：超时时间对线程池中已经运行的线程不生效，只对尚未运行的生效。
	    好像不能对线程分开设置超时时间？

5）QThreadPool 对线程的管理 偏底层，如果对线程的功能特别了解，那么用起来很顺手。否则可以使用
   Qt Concurrent module 来更加易用地操作线程。
   (建议使用QThreadPool，后期特别了解后，可以使用Qt Concurrent module)


#3    ==========================================================================================

当QRunnable的autoDelete为ture时，其管理这为线程池。否则为调用者。

#4    ==========================================================================================

当QThreadPool 调用 start 或者 tryStart 接收 QRunnable 的时候，是跳过QThread这个中间层的，相当于默认
创建了一个QThread

#5    ==========================================================================================







##  ==========================        QThread 实现 单线程实例               ============================

#1    ==========================================================================================

上面说的是 QThreadPool 和 QRunnable 结合起来使用，实现线程池的方法，在使用QThreadPool的时候是不需要实例化QThread
这样的线程实例的，它直接面对可执行函数类 QRunnable ，即直接管理待执行函数。这样来看，灵活性较差，专用性更强。
可能在Pool内部会实例化QThread来管理QRunnable？这个要看QRunable的具体实现

#2    ==========================================================================================

QThread实例为当前线程的子线程，那么新创建的这个线程的主线程为创建它的线程，而不是调用其run()函数的线程。

#3    ==========================================================================================

线程的创建 、 执行 和 退出




（*）如果QObject有parent，那么无法使用moveToThread

（*）把某个QObject注册到主线程中 myObject->moveToThread(QApplication::instance()->thread());

（*）停止某个线程myObject->moveToThread(Q_NULLPTR);

（*）QObject可以通过moveToThread在各个线程间切换，当时其定时器之类的参数会有特性化改变，具体见文档。
     同时，在切换时QEvent::ThreadChange会发送给QObject



创建一 ： 

所有QObject都有moveToThread方法，可以通过此方法把自己暴露给一个QThread。QThread有一系列信号和槽，
分别用来执行和代表线程操作。那么我们需要在QObject中实现多个函数实现，来链接到QThread的信号和槽中。

	connect(&workerThread, &QThread::finished, worker, &QObject::deleteLater);		//worker在线程finished后，自我销毁

        connect(this, &Controller::operate, worker, &Worker::doWork);		//QThread调用start后，会发送operate信号，那么
										//我们就把QObject的线程函数体注册到这个信号上即可

   PS：线程执行后也会发送相关信号，具体可以参考QThread的详细说明

Warning: This function is not thread-safe; the current thread must be same as the current thread affinity. 
In other words, this function can only "push" an object from the current thread to another thread, it 
cannot "pull" an object from any arbitrary thread to the current thread.

------------------------------------------------------------------------------------------------------------------------

创建二 ：

定义类的时候继承QThread，然后重新实现虚函数 run()。run()的内容便是线程函数内容。
线程的启动需要调用start函数。

这个方法要求某个类必须继承QThread，这从设计上来说，有点牵强，因为很多情况下设计者对于类的定位可能就是某个工具，现在给他
强加一个线程定性，感觉有点奇怪。

run运行结束后，QThread便会exit

（*）继承和实例化QThread时，实例存在父线程的堆栈中，当调用run函数时，run函数的内容是在新创建线程的堆栈中运行的。

Class A:public QThread{

public:
	int a;
public:
	run(){
	    a++;	//子线程中对 a++
	}

}

main.cpp

A* p_a = new A();

p_a.a = p_a.a + 1;	//父线程中对 a++

p_a.start();		


(*)上述案例中，a是存在于堆中的(在QThread实例中)，父子线程可以同时访问到堆空间，那么这个访问就存在竞争关系，需要加锁
   
（？）是否存在QThread创建在栈内？这样的话，是否会报错，因为调用run会创建子线程，那么子线程将无法访问主线程栈中的QThread实例 


------------------------------------------------------------------------------------------------------------------------

小结：方法一从设计上来说，更优。但是在线程安全性上存在隐患，当在不需要考虑 重入 的时候，可以使用
     


线程的停止 ： exit()  quit() terminate()




#4    ==========================================================================================

线程的同步 ： Synchronizing Threads

上面说了在创建线程时会出现 父线程 和 子线程能同时访问 QThread实例内成员变量的情况(因为实例在堆内)


----通用同步手段----
QMutex 		互斥锁
QReadWriteLock 	读写锁
QSemaphore 	信号量
QWaitCondition  条件变量

----高级同步手段----
使用信号和槽

每个线程都有自己的 event loop ，跨线程链接信号和槽如何操作？







										   



















